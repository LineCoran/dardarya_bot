import TelegramBot from 'node-telegram-bot-api';
import { KEYBOARDS } from './constants/constants.js';
import fs from 'fs';
import { dbService } from './service.js';

const token = process.env.TG_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const MAIN_ADMIN = 'alexeiiiii';
const SUB_MAIN_ADMIN = ['Mazhako'];
const DELETE_ADMIN_UNIQ_PREFIX = '/delete_admin--'


bot.setMyCommands([{ command: '/start', description: '–ù–∞—á–∞—Ç—å' }]);


const createCategoryOptions = (inline_keyboard, options = { isBack: false, isMain: false, isCancel: false }) => {

    if (options.isBack) inline_keyboard = [...inline_keyboard, ...KEYBOARDS.BACK ]
    if (options.isMain) inline_keyboard = [...inline_keyboard, ...KEYBOARDS.MAIN ]
    if (options.isCancel) inline_keyboard = [...inline_keyboard, ...KEYBOARDS.CANCEL ]

    return {
        reply_markup: JSON.stringify({ inline_keyboard })
    };
};


const getStartMsg = (isAdmin) => {
    let buttons = [...KEYBOARDS.START]
    if (isAdmin) buttons = [...buttons, ...KEYBOARDS.ADMIN]
    return {
        text: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!',
        options: createCategoryOptions(buttons),
    }
}

const sendOrEditMessage = async (chatId, newText, options) => {
    const session = await dbService.getUserSession(chatId);
    const lastMessageId = session.last_message_id;
  try {
    if (lastMessageId) {
      await bot.editMessageText(newText, {
        chat_id: chatId,
        message_id: lastMessageId,
        ...options,
      });
    } else {
      const sentMessage = await bot.sendMessage(chatId, newText, options);
      session.last_message_id = sentMessage.message_id
    dbService.saveUserSession(chatId, session);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    const sentMessage = await bot.sendMessage(chatId, newText, options);
    session.last_message_id = sentMessage.message_id
    dbService.saveUserSession(chatId, session);
  }
};

const sendMessage = async (chatId, text, options) => {
    const session = await dbService.getUserSession(chatId);
  try {
      const sentMessage = await bot.sendMessage(chatId, text, options);
      session.last_message_id = sentMessage.message_id;
      await dbService.saveUserSession(chatId, session);
  } catch (error) {
    const sentMessage = await bot.sendMessage(chatId, text, options);
    session.last_message_id = sentMessage.message_id
    await dbService.saveUserSession(chatId, session);
  }
};

bot.on('message', async (msg) => {

    try {
        const chatId = msg.chat.id;
        const text = msg.text;
            
        const session = await dbService.getUserSession(chatId);

        if (session.is_set_admin_process) {
            const isValidUser = text.includes('@') && text.length > 1;

            if (!isValidUser) return sendMessage(chatId, `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª '@' –∏–ª–∏ –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É`, createCategoryOptions([], { isMain: true }));
            const justName = text.replaceAll('@', '')

            try {
                await dbService.addAdmin(justName)
                return sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, createCategoryOptions([], { isMain: true }));
            } catch(error) {
                return sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${text}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, createCategoryOptions([], { isMain: true }));
            }
            
        }

        if (session.is_create_order_process) {

            if (!msg.photo) return sendMessage(chatId, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–æ–≤–∞—Ä–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.', createCategoryOptions([], { isMain: true }))
            if (!msg.caption) return sendMessage(chatId, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.', createCategoryOptions([], { isMain: true }));
            sendMessage(chatId, '–û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑');

            setTimeout(async () => {
                await sendOrEditMessage(chatId, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', createCategoryOptions(KEYBOARDS.NEW_ORDER, { isMain: true }));
                const admins = await getChatsWithAdmins();

                admins.forEach(adminChatId => {
                    sendMessage(adminChatId, `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!`)
                    bot.forwardMessage(adminChatId, chatId, msg.message_id)
                })
                session.is_create_order_process = false;
                dbService.saveUserSession(chatId, session)
            }, 3000)
            return
        }


        switch (text) {
            case '/start':
                const admins =  await getAdmins()
                if (admins.includes(msg.chat.username)) {
                    try {
                        session.is_admin = true;
                        await dbService.addChatWithAdmin(msg.chat.username, chatId);
                        await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${msg.chat.first_name} ${msg.chat.last_name}! –¢—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!`);
                        await bot.sendMessage(chatId, `–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å!`);
                    } catch (error) {
                        await bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û—à–∏–±–∫–∞ ${error.message}`);
                    }
                }

                const { text, options } = getStartMsg(session.is_admin);
                const sentMessage = await bot.sendMessage(chatId, text, options );
                session.last_message_id = sentMessage.message_id;
                session.first_name = msg.chat.first_name || 'unkwon first_name';
                session.second_name = msg.chat.last_name || 'unkwon last_name';
                dbService.saveUserSession(chatId, session);
            default:
                return;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

bot.on('callback_query', async (query) => {
    try {


    const chatId = query.message.chat.id;
    const callback_query = query.data;
    const session = await dbService.getUserSession(chatId);

    if (callback_query.includes(DELETE_ADMIN_UNIQ_PREFIX)) {
        const adminUserNameToDelete = callback_query.replaceAll(DELETE_ADMIN_UNIQ_PREFIX, '')

        if ([...MAIN_ADMIN, ...SUB_MAIN_ADMIN].includes(adminUserNameToDelete)) {
            return sendOrEditMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${adminUserNameToDelete} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!`, createCategoryOptions([], { isMain: true }));
        }

        try {
            await dbService.deleteAdmin(adminUserNameToDelete);
            return sendOrEditMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${adminUserNameToDelete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!`, createCategoryOptions([], { isMain: true }))    
        } catch(error) {
            console.log(error)
            return sendOrEditMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${adminUserNameToDelete}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! ${error.message}`, createCategoryOptions([], { isMain: true }))    
        }

    }

    switch (callback_query) {
        case '/about':
            return  sendOrEditMessage(chatId, '\n' +
                '–ü—Ä–∏–≤–µ—Ç üëã \n' +
                '\n' +
                '–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∞—à–∞! –Ø –∑–∞–Ω–∏–º–∞—é—Å—å –≤—ã–∫—É–ø–æ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è –ø–æ–¥ –∫–ª—é—á üîë \n' +
                '\n' +
                '–ó–∞–Ω–∏–º–∞—é—Å—å —è —ç—Ç–∏–º –±–æ–ª–µ–µ 3 –ª–µ—Ç. –ü–æ—ç—Ç–æ–º—É —Å –≤–∞—à–∏–º –≥—Ä—É–∑–æ–º —Ç–æ—á–Ω–æ –≤—Å—ë –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ!\n' +
                '\n' +
                '–Ø –ø—Ä–∏–≤–µ–∑–ª–∞ –±–æ–ª–µ–µ 10 —Ç–æ–Ω–Ω, —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ–≤–∞—Ä–∞.\n' +
                '\n' +
                '–° –æ—Ç–∑—ã–≤–∞–º–∏ –º–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞ –º–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–µ –≤ ¬´Instagram¬ª. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–µ –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª\n' +
                '\n' +
                '–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–∫–∞—á–∞–ª–∏ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —É –º–µ–Ω—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ì–∞–π–¥. –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º–∏ - –æ–±—É—á–µ–Ω–∏–µ.\n' +
                '\n' +
                '–ñ–¥—É –≤–∞—à –∑–∞–∫–∞–∑ üòâ', createCategoryOptions([], { isBack: true })
            )
        case '/back':
            const { text, options } = getStartMsg(session.is_admin)
            session.is_create_order_process = false;
            session.is_set_admin_process = false;
            await dbService.saveUserSession(chatId, session);
            return sendOrEditMessage(chatId, text, options );
        case '/contacts':
            return sendOrEditMessage(chatId, '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', createCategoryOptions(KEYBOARDS.LINKS.CONTACTS, { isBack: true }))
        case '/conditions':
            return sendOrEditMessage(chatId, '–£—Å–ª–æ–≤–∏—è:', createCategoryOptions(KEYBOARDS.LINKS.CONDITIONS, { isBack: true }))
        case '/agreements':
            return sendOrEditMessage(chatId, '–î–æ–≥–æ–≤–æ—Ä–∞:', createCategoryOptions(KEYBOARDS.LINKS.AGREEMENTS, { isBack: true }))
        case '/education':
            return sendOrEditMessage(chatId, `–ë–∞–∑–∞ WeChat - 50 BYN\n–î–æ—Å—Ç–∞–≤–∫–∞ - 150 BYN\n–í—ã–∫—É–ø - 200 BYN\n–í—ã–∫—É–ø –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ - 300 BYN\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –≤–≤–æ–∑—É - 500 BYN`, createCategoryOptions([], { isBack: true }))
        case '/order':            
            const photoPath = './assets/order_form.jpg';
            if (!session.is_send_photo) {
                session.is_send_photo = true;
                dbService.saveUserSession(chatId, session);
                await bot.sendPhoto(chatId, fs.createReadStream(photoPath), { caption: '–ü—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è' });
                await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:', createCategoryOptions(KEYBOARDS.ORDER, { isBack: true }))
            } else {
                return sendOrEditMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:', createCategoryOptions(KEYBOARDS.ORDER, { isBack: true }))
            }
            
        case '/credentials':
            return sendOrEditMessage(chatId, `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–ü –ß—É—è–Ω–æ–≤–∞ –î–∞—Ä—å—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞\n–£–ù–ü : 491643105\n–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ : BY74POIS30130163001701933001\n–ë–∞–Ω–∫ : –û–ê–û ¬´–ü–∞—Ä–∏—Ç–µ—Ç–±–∞–Ω–∫¬ª\n–ë–ò–ö : POISBY2X\n–ö–û–î –ü–õ–ê–¢–ï–ñ–ê (–≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) : 90401\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ : –û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥`, createCategoryOptions([], { isBack: true }))    
        case '/create_order':
            session.is_create_order_process = true;
            dbService.saveUserSession(chatId, session);
            return sendOrEditMessage(chatId, '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Å —Ç–µ–∫—Å—Ç–æ–º:', createCategoryOptions([], { isCancel: true }))

        case '/admin':
            return sendOrEditMessage(chatId, '–†–∞–∑–ª–∏—á–Ω—ã–µ –∫–Ω–æ–ø–æ—á–∫–∏:', createCategoryOptions(KEYBOARDS.ADMIN_BUTTONS, { isBack: true }))

        case '/admin_admins_list':
            let msg = ''
            const admins = await dbService.getAdmins();
            const filteredAdmins = admins.filter(admin => admin.username !== MAIN_ADMIN);
            filteredAdmins.forEach(admin => msg += `@${admin.username}\n`)
            return sendOrEditMessage(chatId, `–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n ${msg}`, createCategoryOptions([], { isBack: true } ))
        case '/admin_sessions':

        try {
            let msgForSession = ''
            const allSession = await dbService.getSessions();
            allSession.forEach(sessionItem => msgForSession += `–ò–º—è: ${sessionItem.first_name} ${sessionItem.second_name}\n –î–∞—Ç–∞: ${sessionItem.timestamp}`)
            return sendOrEditMessage(chatId, `–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π:\n ${msgForSession}`, createCategoryOptions([], { isBack: true } ))

        } catch (error) {
            return sendOrEditMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. Error: ${error.message}`, createCategoryOptions([], { isBack: true } ))
        }

        case '/admin_set_admin':
            session.is_set_admin_process = true;
            dbService.saveUserSession(chatId, session);
            return sendOrEditMessage(chatId, '–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @alexeiiiii:', createCategoryOptions([], { isCancel: true }))
        case '/admin_delete_admin':
            const adminsToDelete = await dbService.getAdmins();
            const filteredAdminsToDelete = adminsToDelete.filter(admin => admin.username !== MAIN_ADMIN);
            const buttonWithAdminsToDelete = createAdminsListToDelete(filteredAdminsToDelete);
            if (buttonWithAdminsToDelete.length === 0) return sendOrEditMessage(chatId, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –£–¥–∞–ª—è—Ç—å –Ω–µ–∫–æ–≥–æ.', createCategoryOptions([], { isMain: true }))    
            return sendOrEditMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', createCategoryOptions(buttonWithAdminsToDelete, { isCancel: true }))    
        default:
            return;
    }

} catch(e) {
    console.log(e)
}
});


const createAdminsListToDelete = (admins) => {

    const result = [];

    admins.forEach(({ username }) => {
        result.push(
            [
                {
                    text: `–£–¥–∞–ª–∏—Ç—å ${username}`,
                    callback_data: `${DELETE_ADMIN_UNIQ_PREFIX}${username}`,
                }
            ]
        )
    })

    return result;
}

const getAdmins = async () => {
    const result = [];

    try {
        const admins = await dbService.getAdmins();
        admins.forEach(row => result.push(row.username));
        
    } catch (error) {
        console.log(error)
        return [];
    }

    return result
}

const getChatsWithAdmins = async () => {
    const chats = [];

    try {

        const chatsFromDb = await dbService.getChatsWithAdmins();
        chatsFromDb.forEach(row => chats.push(row.chat_id));
        
    } catch (error) {
        console.log(error)
        return [];
    }

    return chats
}
